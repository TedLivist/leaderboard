(()=>{"use strict";var r,n,e,t,o,i,a,s,A,c,u,l,p,d,f={64:(r,n,e)=>{e.d(n,{Z:()=>s});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,".container {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 5px;\r\n}\r\n\r\n.scores-section {\r\n  padding: 0 4em 0 8em;\r\n}\r\n\r\n.input-section {\r\n  padding: 0 8em 0 4em;\r\n}\r\n\r\nform {\r\n  display: grid;\r\n}\r\n\r\n.recent {\r\n  display: flex;\r\n}\r\n\r\n.recent div {\r\n  flex: 1;\r\n}\r\n\r\ninput {\r\n  height: 40px;\r\n  margin-bottom: 20px;\r\n  margin-top: 10px;\r\n  border: 3px solid black;\r\n  padding: 0 10px;\r\n}\r\n\r\n.btn {\r\n  width: 6rem;\r\n  height: 2rem;\r\n  font-size: 0.98rem;\r\n}\r\n\r\n.refresh-btn {\r\n  float: right;\r\n}\r\n\r\n.sub-header {\r\n  font-size: 1.5rem;\r\n  font-weight: bolder;\r\n}\r\n\r\n.scores-list {\r\n  border: 3px solid black;\r\n  margin-top: 10px;\r\n}\r\n\r\n.scores-list li {\r\n  list-style: none;\r\n  font-size: 1.1rem;\r\n  padding: 4px;\r\n}\r\n\r\n.submit-btn {\r\n  float: right;\r\n}","",{version:3,sources:["webpack://./src/assets/stylesheets/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,QAAQ;AACV;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,YAAY;AACd",sourcesContent:[".container {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 5px;\r\n}\r\n\r\n.scores-section {\r\n  padding: 0 4em 0 8em;\r\n}\r\n\r\n.input-section {\r\n  padding: 0 8em 0 4em;\r\n}\r\n\r\nform {\r\n  display: grid;\r\n}\r\n\r\n.recent {\r\n  display: flex;\r\n}\r\n\r\n.recent div {\r\n  flex: 1;\r\n}\r\n\r\ninput {\r\n  height: 40px;\r\n  margin-bottom: 20px;\r\n  margin-top: 10px;\r\n  border: 3px solid black;\r\n  padding: 0 10px;\r\n}\r\n\r\n.btn {\r\n  width: 6rem;\r\n  height: 2rem;\r\n  font-size: 0.98rem;\r\n}\r\n\r\n.refresh-btn {\r\n  float: right;\r\n}\r\n\r\n.sub-header {\r\n  font-size: 1.5rem;\r\n  font-weight: bolder;\r\n}\r\n\r\n.scores-list {\r\n  border: 3px solid black;\r\n  margin-top: 10px;\r\n}\r\n\r\n.scores-list li {\r\n  list-style: none;\r\n  font-size: 1.1rem;\r\n  padding: 4px;\r\n}\r\n\r\n.submit-btn {\r\n  float: right;\r\n}"],sourceRoot:""}]);const s=a},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e=r(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(r,e,t){"string"==typeof r&&(r=[[null,r,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<r.length;s++){var A=[].concat(r[s]);t&&o[A[0]]||(e&&(A[2]?A[2]="".concat(e," and ").concat(A[2]):A[2]=e),n.push(A))}},n}},15:r=>{function n(r,n){(null==n||n>r.length)&&(n=r.length);for(var e=0,t=new Array(n);e<n;e++)t[e]=r[e];return t}r.exports=function(r){var e,t,o=(t=4,function(r){if(Array.isArray(r))return r}(e=r)||function(r,n){var e=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=e){var t,o,i=[],a=!0,s=!1;try{for(e=e.call(r);!(a=(t=e.next()).done)&&(i.push(t.value),!n||i.length!==n);a=!0);}catch(r){s=!0,o=r}finally{try{a||null==e.return||e.return()}finally{if(s)throw o}}return i}}(e,t)||function(r,e){if(r){if("string"==typeof r)return n(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(r,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(A," */"),u=a.sources.map((function(r){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(r," */")}));return[i].concat(u).concat([c]).join("\n")}return[i].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var i={},a=[],s=0;s<r.length;s++){var A=r[s],c=t.base?A[0]+t.base:A[0],u=i[c]||0,l="".concat(c," ").concat(u);i[c]=u+1;var p=e(l),d={css:A[1],media:A[2],sourceMap:A[3]};-1!==p?(n[p].references++,n[p].updater(d)):n.push({identifier:l,updater:o(d,t),references:1}),a.push(l)}return a}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var A=t(r,o),c=0;c<i.length;c++){var u=e(i[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=A}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t=e.css,o=e.media,i=e.sourceMap;o?r.setAttribute("media",o):r.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,r)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},m={};function h(r){var n=m[r];if(void 0!==n)return n.exports;var e=m[r]={id:r,exports:{}};return f[r](e,e.exports,h),e.exports}h.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return h.d(n,{a:n}),n},h.d=(r,n)=>{for(var e in n)h.o(n,e)&&!h.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},h.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),r=h(379),n=h.n(r),e=h(795),t=h.n(e),o=h(569),i=h.n(o),a=h(565),s=h.n(a),A=h(216),c=h.n(A),u=h(589),l=h.n(u),p=h(64),(d={}).styleTagTransform=l(),d.setAttributes=s(),d.insert=i().bind(null,"head"),d.domAPI=t(),d.insertStyleElement=c(),n()(p.Z,d),p.Z&&p.Z.locals&&p.Z.locals,console.log("Hahaha")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,